#include <stdio.h>

int main() {
    int n, quantum, time = 0, completed = 0, i;
    float total_wait_time = 0, total_turnaround_time = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    int at[n], bt[n], rt[n], ct[n], wt[n], tat[n];
    
    for (i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &at[i], &bt[i]);
        rt[i] = bt[i];  // Initialize remaining time with burst time
    }

    while (completed != n) {
        int done = 1;

        for (i = 0; i < n; i++) {
            if (rt[i] > 0 && at[i] <= time) {  // Process is ready and remaining time > 0
                done = 0; // There is still a process to execute

                if (rt[i] > quantum) {  // If the process needs more time than the quantum
                    time += quantum;
                    rt[i] -= quantum;
                } else {  // Process can finish within the quantum
                    time += rt[i];
                    rt[i] = 0;
                    ct[i] = time;  // Record the completion time
                    
                    tat[i] = ct[i] - at[i];   // Turnaround time
                    wt[i] = tat[i] - bt[i];   // Waiting time
                    
                    total_wait_time += wt[i];
                    total_turnaround_time += tat[i];
                    
                    completed++;
                }
            }
        }

        if (done == 1) {
            time++;  // If no process was ready to run, increment time
        }
    }

    // Display Completion times
    printf("Round Robin Completion Times:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: Completion Time = %d\n", i + 1, ct[i]);
    }

    // Display average times
    printf("Average Waiting Time: %.2f\n", total_wait_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);

    return 0;
}
