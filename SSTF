#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 100

// Function to sort requests in ascending order
void sort(int requests[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }
}

// Shortest Seek Time First (SSTF) Algorithm
void SSTF(int requests[], int n, int head) {
    int completed[MAX_REQUESTS] = {0};
    int total_seek = 0;
    int current = head;

    printf("\nSSTF Seek Sequence: ");
    for (int i = 0; i < n; i++) {
        int min = 9999, idx = -1;
        for (int j = 0; j < n; j++) {
            if (!completed[j] && abs(current - requests[j]) < min) {
                min = abs(current - requests[j]);
                idx = j;
            }
        }
        printf("%d -> ", requests[idx]);
        total_seek += abs(current - requests[idx]);
        current = requests[idx];
        completed[idx] = 1;
    }
    printf("\nTotal Seek Time: %d\n", total_seek);
}

// SCAN Algorithm
void SCAN(int requests[], int n, int head, int disk_size) {
    int total_seek = 0;
    int current = head;

    // Sort the requests to process them in order
    sort(requests, n);
    printf("\nSCAN Seek Sequence: ");
    
    // Process requests in the direction of the head
    for (int i = 0; i < n; i++) {
        if (requests[i] >= head) {
            for (int j = i; j < n; j++) {
                printf("%d -> ", requests[j]);
                total_seek += abs(current - requests[j]);
                current = requests[j];
            }
            // Move to the end of the disk
            total_seek += abs(current - (disk_size - 1));
            current = disk_size - 1;

            // Process remaining requests in reverse order
            for (int j = i - 1; j >= 0; j--) {
                printf("%d -> ", requests[j]);
                total_seek += abs(current - requests[j]);
                current = requests[j];
            }
            break;
        }
    }
    
    printf("\nTotal Seek Time: %d\n", total_seek);
}

// C-LOOK Algorithm
void CLOOK(int requests[], int n, int head) {
    int total_seek = 0;
    int current = head;

    // Sort the requests to process them in order
    sort(requests, n);
    printf("\nC-LOOK Seek Sequence: ");
    
    // Process requests in the direction of the head
    for (int i = 0; i < n; i++) {
        if (requests[i] >= head) {
            for (int j = i; j < n; j++) {
                printf("%d -> ", requests[j]);
                total_seek += abs(current - requests[j]);
                current = requests[j];
            }
            // Wrap around to the beginning for remaining requests
            for (int j = 0; j < i; j++) {
                printf("%d -> ", requests[j]);
                total_seek += abs(current - requests[j]);
                current = requests[j];
            }
            break;
        }
    }
    
    printf("\nTotal Seek Time: %d\n", total_seek);
}

int main() {
    int n, head, disk_size = 200;

    printf("Enter number of requests: ");
    scanf("%d", &n);
    int requests[MAX_REQUESTS];

    printf("Enter the requests: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter initial head position: ");
    scanf("%d", &head);
    
    // SSTF Algorithm
    SSTF(requests, n, head);
    
    // SCAN Algorithm
    SCAN(requests, n, head, disk_size);
    
    // C-LOOK Algorithm
    CLOOK(requests, n, head);
    
    return 0;
}
