#include <stdio.h>

struct Process {
    int id;         // Process ID
    int burst_time; // Burst time
    int arrival_time; // Arrival time
};

// Function to find the waiting time and turnaround time
void findWaitingTime(struct Process proc[], int n, int bt[], int wt[]) {
    int rt[n]; // Remaining time
    for (int i = 0; i < n; i++)
        rt[i] = bt[i];

    int complete = 0, t = 0, min_index;
    while (complete != n) {
        // Find the process with the minimum remaining time at the current time
        min_index = -1;
        for (int j = 0; j < n; j++) {
            if (proc[j].arrival_time <= t && rt[j] > 0) {
                if (min_index == -1 || rt[j] < rt[min_index]) {
                    min_index = j;
                }
            }
        }

        if (min_index != -1) {
            // Process is found
            rt[min_index]--;
            // If a process is completed
            if (rt[min_index] == 0) {
                complete++;
                wt[min_index] = t + 1 - proc[min_index].arrival_time - bt[min_index];
            }
        }
        t++;
    }
}

// Function to calculate turnaround time
void findTurnAroundTime(struct Process proc[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

// Function to calculate average time
void findavgTime(struct Process proc[], int n) {
    int bt[n], wt[n], tat[n];
    for (int i = 0; i < n; i++) {
        bt[i] = proc[i].burst_time;
    }

    findWaitingTime(proc, n, bt, wt);
    findTurnAroundTime(proc, n, bt, wt, tat);

    float total_wt = 0, total_tat = 0;
    printf("\nProcess ID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].burst_time, proc[i].arrival_time, wt[i], tat[i]);
    }

    printf("\nAverage Waiting Time: %.2f", total_wt / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);
}

int main() {
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];
    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1; // Assigning process ID
        printf("Enter Burst Time and Arrival Time for Process %d: ", i + 1);
        scanf("%d %d", &proc[i].burst_time, &proc[i].arrival_time);
    }

    findavgTime(proc, n);

    return 0;
}
